# Generated by Django 4.2.7 on 2025-07-08 01:29

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_type', models.CharField(choices=[('admin', 'Admin/Bookmaker'), ('host', 'Host'), ('guest', 'Guest')], default='guest', max_length=10)),
                ('is_email_verified', models.BooleanField(default=False)),
                ('email_verification_token', models.CharField(blank=True, max_length=255)),
                ('is_paid_host', models.BooleanField(default=False)),
                ('subscription_end_date', models.DateTimeField(blank=True, null=True)),
                ('stripe_customer_id', models.CharField(blank=True, max_length=255)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Amenity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('icon', models.CharField(blank=True, max_length=50)),
                ('category', models.CharField(max_length=50)),
            ],
            options={
                'verbose_name_plural': 'Amenities',
            },
        ),
        migrations.CreateModel(
            name='Booking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('external_booking_id', models.CharField(blank=True, max_length=100)),
                ('check_in_date', models.DateField()),
                ('check_out_date', models.DateField()),
                ('num_guests', models.IntegerField()),
                ('base_price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('cleaning_fee', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('service_fee', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('total_price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('confirmed', 'Confirmed'), ('checked_in', 'Checked In'), ('checked_out', 'Checked Out'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('ai_generated_instructions', models.TextField(blank=True)),
                ('sentiment_score', models.DecimalField(blank=True, decimal_places=2, max_digits=3, null=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Channel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('api_endpoint', models.URLField(blank=True)),
                ('logo', models.ImageField(blank=True, upload_to='channel_logos/')),
                ('is_active', models.BooleanField(default=True)),
                ('requires_api_key', models.BooleanField(default=True)),
                ('supports_webhooks', models.BooleanField(default=False)),
                ('rate_limit_per_minute', models.IntegerField(default=60)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='ChannelConnection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('api_key', models.CharField(blank=True, max_length=255)),
                ('api_secret', models.CharField(blank=True, max_length=255)),
                ('access_token', models.TextField(blank=True)),
                ('refresh_token', models.TextField(blank=True)),
                ('ical_url', models.URLField(blank=True, help_text='iCal feed URL')),
                ('email_sync_enabled', models.BooleanField(default=False)),
                ('scraping_enabled', models.BooleanField(default=False)),
                ('extension_token', models.CharField(blank=True, max_length=255)),
                ('login_email', models.EmailField(blank=True, max_length=254)),
                ('login_password_encrypted', models.CharField(blank=True, max_length=255)),
                ('preferred_sync_method', models.CharField(choices=[('ical', 'iCal Feed'), ('email', 'Email Parsing'), ('scraping', 'Web Scraping'), ('extension', 'Browser Extension'), ('mobile_api', 'Mobile API')], default='ical', max_length=20)),
                ('last_sync_method', models.CharField(blank=True, max_length=20)),
                ('last_sync_error', models.TextField(blank=True)),
                ('is_connected', models.BooleanField(default=False)),
                ('last_sync', models.DateTimeField(blank=True, null=True)),
                ('sync_errors', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('channel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='booking_vision_APP.channel')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'channel')},
            },
        ),
        migrations.CreateModel(
            name='Guest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=254)),
                ('phone', models.CharField(blank=True, max_length=20)),
                ('country', models.CharField(blank=True, max_length=100)),
                ('preferences', models.JSONField(blank=True, default=dict)),
                ('satisfaction_score', models.DecimalField(blank=True, decimal_places=2, max_digits=3, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('payment_method', models.CharField(choices=[('credit_card', 'Credit Card'), ('debit_card', 'Debit Card'), ('bank_transfer', 'Bank Transfer'), ('paypal', 'PayPal'), ('stripe', 'Stripe'), ('cash', 'Cash'), ('other', 'Other')], max_length=20)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed'), ('refunded', 'Refunded'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('transaction_id', models.CharField(blank=True, max_length=100, null=True, unique=True)),
                ('payment_date', models.DateTimeField(blank=True, null=True)),
                ('due_date', models.DateField(blank=True, null=True)),
                ('description', models.TextField(blank=True)),
                ('currency', models.CharField(default='USD', max_length=3)),
                ('processing_fee', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('booking', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='booking_vision_APP.booking')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Property',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('property_type', models.CharField(choices=[('apartment', 'Apartment'), ('house', 'House'), ('villa', 'Villa'), ('condo', 'Condo'), ('studio', 'Studio')], max_length=20)),
                ('address', models.CharField(max_length=300)),
                ('city', models.CharField(max_length=100)),
                ('country', models.CharField(max_length=100)),
                ('zip_code', models.CharField(max_length=20)),
                ('bedrooms', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('bathrooms', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('max_guests', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('base_price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('latitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('ai_pricing_enabled', models.BooleanField(default=False)),
                ('ai_maintenance_enabled', models.BooleanField(default=False)),
                ('ai_guest_enabled', models.BooleanField(default=False)),
                ('ai_analytics_enabled', models.BooleanField(default=False)),
                ('last_pricing_update', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='properties', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Properties',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone', models.CharField(blank=True, max_length=20)),
                ('address', models.CharField(blank=True, max_length=300)),
                ('city', models.CharField(blank=True, max_length=100)),
                ('country', models.CharField(blank=True, max_length=100)),
                ('profile_picture', models.ImageField(blank=True, upload_to='profile_pics/')),
                ('company_name', models.CharField(blank=True, max_length=200)),
                ('tax_id', models.CharField(blank=True, max_length=100)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('id_verification_status', models.CharField(default='unverified', max_length=20)),
                ('ai_pricing_enabled', models.BooleanField(default=False)),
                ('ai_maintenance_enabled', models.BooleanField(default=False)),
                ('ai_guest_enabled', models.BooleanField(default=False)),
                ('ai_analytics_enabled', models.BooleanField(default=False)),
                ('subscription_plan', models.CharField(default='free', max_length=50)),
                ('subscription_active', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PropertyImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='property_images/')),
                ('caption', models.CharField(blank=True, max_length=200)),
                ('is_primary', models.BooleanField(default=False)),
                ('order', models.IntegerField(default=0)),
                ('property', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='booking_vision_APP.property')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='PricingRule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('min_days_ahead', models.IntegerField(default=0)),
                ('max_days_ahead', models.IntegerField(default=365)),
                ('min_stay_length', models.IntegerField(default=1)),
                ('max_stay_length', models.IntegerField(default=30)),
                ('base_multiplier', models.DecimalField(decimal_places=2, default=1.0, max_digits=5)),
                ('weekend_multiplier', models.DecimalField(decimal_places=2, default=1.0, max_digits=5)),
                ('holiday_multiplier', models.DecimalField(decimal_places=2, default=1.0, max_digits=5)),
                ('high_demand_threshold', models.DecimalField(decimal_places=2, default=0.8, max_digits=5)),
                ('high_demand_multiplier', models.DecimalField(decimal_places=2, default=1.2, max_digits=5)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('rental_property', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pricing_rules', to='booking_vision_APP.property')),
            ],
        ),
        migrations.CreateModel(
            name='Payout',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('status', models.CharField(choices=[('scheduled', 'Scheduled'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed')], default='scheduled', max_length=20)),
                ('payout_date', models.DateField()),
                ('payment_method', models.CharField(max_length=50)),
                ('account_details', models.CharField(blank=True, max_length=200)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payouts', to=settings.AUTH_USER_MODEL)),
                ('payments', models.ManyToManyField(related_name='payouts', to='booking_vision_APP.payment')),
            ],
        ),
        migrations.CreateModel(
            name='NotificationRule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('trigger', models.CharField(choices=[('booking_created', 'New Booking'), ('check_in_reminder', 'Check-in Reminder'), ('check_out_reminder', 'Check-out Reminder'), ('review_request', 'Review Request'), ('payment_reminder', 'Payment Reminder'), ('maintenance_due', 'Maintenance Due'), ('low_occupancy', 'Low Occupancy Alert'), ('high_demand', 'High Demand Alert')], max_length=50)),
                ('channel', models.CharField(choices=[('email', 'Email'), ('sms', 'SMS'), ('platform', 'Platform Message'), ('push', 'Push Notification')], max_length=20)),
                ('days_before', models.IntegerField(default=0, help_text='Days before event (negative for after)')),
                ('time_of_day', models.TimeField(blank=True, null=True)),
                ('subject', models.CharField(max_length=200)),
                ('message_template', models.TextField(help_text='Use {guest_name}, {property_name}, {check_in_date}, etc.')),
                ('apply_to_all_properties', models.BooleanField(default=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('properties', models.ManyToManyField(blank=True, to='booking_vision_APP.property')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notification_rules', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='NotificationLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recipient', models.EmailField(max_length=254)),
                ('channel', models.CharField(max_length=20)),
                ('subject', models.CharField(max_length=200)),
                ('message', models.TextField()),
                ('sent_at', models.DateTimeField(auto_now_add=True)),
                ('is_successful', models.BooleanField(default=True)),
                ('error_message', models.TextField(blank=True)),
                ('booking', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='booking_vision_APP.booking')),
                ('rule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='logs', to='booking_vision_APP.notificationrule')),
            ],
        ),
        migrations.CreateModel(
            name='MarketData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('location', models.CharField(max_length=200)),
                ('date', models.DateField()),
                ('average_daily_rate', models.DecimalField(decimal_places=2, max_digits=10)),
                ('occupancy_rate', models.DecimalField(decimal_places=2, max_digits=5)),
                ('revenue_per_available_room', models.DecimalField(decimal_places=2, max_digits=10)),
                ('search_volume', models.IntegerField(default=0)),
                ('booking_lead_time', models.IntegerField(default=0)),
                ('events', models.JSONField(blank=True, default=list)),
                ('season_factor', models.DecimalField(decimal_places=2, default=1.0, max_digits=5)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name_plural': 'Market Data',
                'ordering': ['-date'],
                'unique_together': {('location', 'date')},
            },
        ),
        migrations.CreateModel(
            name='MaintenanceTask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('urgent', 'Urgent')], max_length=10)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('scheduled', 'Scheduled'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('predicted_by_ai', models.BooleanField(default=False)),
                ('prediction_confidence', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('predicted_failure_date', models.DateField(blank=True, null=True)),
                ('scheduled_date', models.DateField(blank=True, null=True)),
                ('estimated_duration', models.IntegerField(blank=True, help_text='Duration in hours', null=True)),
                ('estimated_cost', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('completed_date', models.DateField(blank=True, null=True)),
                ('actual_cost', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('rental_property', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='maintenance_tasks', to='booking_vision_APP.property')),
            ],
            options={
                'ordering': ['-priority', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='GuestPreference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('room_temperature', models.IntegerField(blank=True, null=True)),
                ('preferred_check_in_time', models.TimeField(blank=True, null=True)),
                ('preferred_check_out_time', models.TimeField(blank=True, null=True)),
                ('interests', models.JSONField(blank=True, default=list)),
                ('dietary_restrictions', models.JSONField(blank=True, default=list)),
                ('guest_type', models.CharField(blank=True, max_length=50)),
                ('spending_pattern', models.CharField(blank=True, max_length=50)),
                ('communication_preference', models.CharField(blank=True, max_length=50)),
                ('average_rating', models.DecimalField(blank=True, decimal_places=2, max_digits=3, null=True)),
                ('loyalty_score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('guest', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='ai_preferences', to='booking_vision_APP.guest')),
            ],
        ),
        migrations.CreateModel(
            name='BookingMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sender', models.CharField(choices=[('guest', 'Guest'), ('host', 'Host')], max_length=20)),
                ('message', models.TextField()),
                ('is_automated', models.BooleanField(default=False)),
                ('sentiment_score', models.DecimalField(blank=True, decimal_places=2, max_digits=3, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('booking', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='booking_vision_APP.booking')),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.AddField(
            model_name='booking',
            name='channel',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookings', to='booking_vision_APP.channel'),
        ),
        migrations.AddField(
            model_name='booking',
            name='guest',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookings', to='booking_vision_APP.guest'),
        ),
        migrations.AddField(
            model_name='booking',
            name='rental_property',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookings', to='booking_vision_APP.property'),
        ),
        migrations.CreateModel(
            name='ActivityPreference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('show_popup', models.BooleanField(default=True)),
                ('popup_duration', models.IntegerField(default=5000)),
                ('play_sound', models.BooleanField(default=True)),
                ('show_bookings', models.BooleanField(default=True)),
                ('show_messages', models.BooleanField(default=True)),
                ('show_payments', models.BooleanField(default=True)),
                ('show_maintenance', models.BooleanField(default=True)),
                ('show_ai', models.BooleanField(default=True)),
                ('email_daily_summary', models.BooleanField(default=False)),
                ('email_important_only', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='activity_preferences', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PropertyChannel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('external_property_id', models.CharField(max_length=100)),
                ('channel_url', models.URLField(blank=True)),
                ('sync_availability', models.BooleanField(default=True)),
                ('sync_rates', models.BooleanField(default=True)),
                ('sync_content', models.BooleanField(default=True)),
                ('is_active', models.BooleanField(default=True)),
                ('last_sync', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('channel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='booking_vision_APP.channel')),
                ('channel_connection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='booking_vision_APP.channelconnection')),
                ('rental_property', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='booking_vision_APP.property')),
            ],
            options={
                'unique_together': {('rental_property', 'channel')},
            },
        ),
        migrations.CreateModel(
            name='PropertyAmenity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amenity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='booking_vision_APP.amenity')),
                ('property', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='booking_vision_APP.property')),
            ],
            options={
                'verbose_name_plural': 'Property Amenities',
                'unique_together': {('property', 'amenity')},
            },
        ),
        migrations.CreateModel(
            name='Activity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('activity_type', models.CharField(choices=[('booking_created', 'New Booking'), ('booking_cancelled', 'Booking Cancelled'), ('booking_modified', 'Booking Modified'), ('guest_message', 'Guest Message'), ('payment_received', 'Payment Received'), ('property_added', 'Property Added'), ('property_updated', 'Property Updated'), ('channel_connected', 'Channel Connected'), ('maintenance_alert', 'Maintenance Alert'), ('price_changed', 'Price Changed'), ('review_received', 'Review Received'), ('sync_completed', 'Sync Completed'), ('ai_recommendation', 'AI Recommendation')], max_length=50)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('data', models.JSONField(blank=True, default=dict)),
                ('icon', models.CharField(default='bell', max_length=50)),
                ('color', models.CharField(default='primary', max_length=20)),
                ('is_read', models.BooleanField(default=False)),
                ('is_important', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('read_at', models.DateTimeField(blank=True, null=True)),
                ('booking', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='booking_vision_APP.booking')),
                ('property', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='booking_vision_APP.property')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='activities', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['user', '-created_at'], name='booking_vis_user_id_fb10e4_idx'), models.Index(fields=['user', 'is_read'], name='booking_vis_user_id_a6094b_idx')],
            },
        ),
    ]
